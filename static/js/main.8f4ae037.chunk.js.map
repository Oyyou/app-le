{"version":3,"sources":["content/Apple.png","components/questions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Questions","this","props","colour","day","soup","updateColour","updateDay","updateSoup","getResult","className","value","onChange","defaultValue","state","errors","type","onClick","console","log","Component","App","result","bind","e","setState","target","preventDefault","colourError","dayError","soupError","a","substr","b","c","length","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,6OC2D5BC,G,uLAvDD,IAAD,SACyEC,KAAKC,MAAMA,MAAjFC,EADH,EACGA,OAAQC,EADX,EACWA,IAAKC,EADhB,EACgBA,KAAMC,EADtB,EACsBA,aAAcC,EADpC,EACoCA,UAAWC,EAD/C,EAC+CA,WAAYC,EAD3D,EAC2DA,UAMhE,OACI,oCACI,8BACI,qDACA,6BAASC,UAAU,WACf,yBAAKA,UAAU,UACX,4BAAQA,UAAU,mBAAmBC,MAAOR,EAAQS,SAAUN,GAC1D,4BAAQK,MAAM,IAAIE,cAAY,GAA9B,YACA,4BAAQF,MAAM,YAAd,YACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,WAEsC,KAAzCV,KAAKC,MAAMA,MAAMY,MAAMC,OAAOZ,QAAiB,2BAAIF,KAAKC,MAAMA,MAAMY,MAAMC,OAAOZ,SAEtF,yBAAKO,UAAU,UACX,4BAAQA,UAAU,mBAAmBC,MAAOP,EAAKQ,SAAUL,GACvD,4BAAQI,MAAM,IAAIE,cAAY,GAA9B,SACA,4BAAQF,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,UAAd,WAEmC,KAAtCV,KAAKC,MAAMA,MAAMY,MAAMC,OAAOX,KAAc,2BAAIH,KAAKC,MAAMA,MAAMY,MAAMC,OAAOX,MAEnF,yBAAKM,UAAU,UACX,4BAAQA,UAAU,mBAAmBC,MAAON,EAAMO,SAAUJ,GACxD,4BAAQG,MAAM,IAAIE,cAAY,GAA9B,UACA,4BAAQF,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,UAEoC,KAAvCV,KAAKC,MAAMA,MAAMY,MAAMC,OAAOV,MAAe,2BAAIJ,KAAKC,MAAMA,MAAMY,MAAMC,OAAOV,OAEpF,2BAAOK,UAAU,UAAUM,KAAK,SAASL,MAAM,YAAYM,QAASR,UA1ChFS,QAAQC,IAAI,EAAKjB,MAAMA,MAAMY,a,GALjBM,cC0FTC,E,YAtFb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDY,MAAQ,CACXX,OAAQ,GACRC,IAAK,GACLC,KAAM,GACNiB,OAAQ,GACRP,OAAQ,CACNZ,OAAQ,GACRC,IAAK,GACLC,KAAM,KAIV,EAAKC,aAAe,EAAKA,aAAaiB,KAAlB,gBACpB,EAAKhB,UAAY,EAAKA,UAAUgB,KAAf,gBACjB,EAAKf,WAAa,EAAKA,WAAWe,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAlBA,E,0EAqBNC,GACXvB,KAAKwB,SACH,CAAEtB,OAAQqB,EAAEE,OAAOf,U,gCAIba,GACRvB,KAAKwB,SACH,CAAErB,IAAKoB,EAAEE,OAAOf,U,iCAITa,GACTvB,KAAKwB,SACH,CAAEpB,KAAMmB,EAAEE,OAAOf,U,gCAIXa,GACRA,EAAEG,iBAEF,IAAIC,EAAoC,KAAtB3B,KAAKa,MAAMX,OACzB0B,EAA8B,KAAnB5B,KAAKa,MAAMV,IACtB0B,EAAgC,KAApB7B,KAAKa,MAAMT,KAY3B,GAVAJ,KAAKwB,UAAS,SAACX,EAAOZ,GAAR,MAAmB,CAC/Ba,OAAQ,CACNZ,OAAQyB,EAAc,oCAAsC,GAC5DxB,IAAKyB,EAAW,mCAAqC,GACrDxB,KAAMyB,EAAY,yBAA2B,UAInCF,GAAeC,GAAYC,GAE3B,CACZ,IAAIC,EAAI9B,KAAKa,MAAMX,OAAO6B,OAAO,EAAG,GAChCC,EAAIhC,KAAKa,MAAMV,IAAI4B,OAAO,EAAG,GAC7BE,EAAIjC,KAAKa,MAAMT,KAAK2B,OAAO/B,KAAKa,MAAMT,KAAK8B,OAAS,GAExDlC,KAAKwB,UAAS,SAACX,EAAOZ,GAAR,MAAmB,CAC/BoB,OAAO,YAAD,OAAeS,EAAIE,EAAIC,EAAvB,Y,+BAMV,OACE,oCACA,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SACzC,0EAC8C,6BAD9C,mCAKF,kBAAC,EAAD,CAAWpC,MAAOD,OAClB,uBAAGS,UAAU,UAAUT,KAAKa,MAAMQ,c,GAjFxBF,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8f4ae037.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Apple.3d3d9ef3.png\";","import React, { Component } from 'react'\r\nimport './questions.scss'\r\n\r\nclass Questions extends Component {\r\n    render() {\r\n        const { colour, day, soup, updateColour, updateDay, updateSoup, getResult } = this.props.props;\r\n\r\n        const testFunc = () => {\r\n            console.log(this.props.props.state);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <form>\r\n                    <h1>Pick your favourites:</h1>\r\n                    <section className=\"options\">\r\n                        <div className=\"option\">\r\n                            <select className=\"control dropdown\" value={colour} onChange={updateColour}>\r\n                                <option value=\"0\" defaultValue>(Colour)</option>\r\n                                <option value=\"Blorange\">Blorange</option>\r\n                                <option value=\"Fled\">Fled</option>\r\n                                <option value=\"Muurple\">Muurple</option>\r\n                                <option value=\"Splank\">Splank</option>\r\n                                <option value=\"Jellow\">Jellow</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.colour !== \"\" && <p>{this.props.props.state.errors.colour}</p>}\r\n                        </div>\r\n                        <div className=\"option\">\r\n                            <select className=\"control dropdown\" value={day} onChange={updateDay}>\r\n                                <option value=\"0\" defaultValue>(Day)</option>\r\n                                <option value=\"Flensday\">Flensday</option>\r\n                                <option value=\"Floopday\">Floopday</option>\r\n                                <option value=\"Flangaday\">Flangaday</option>\r\n                                <option value=\"Fluteday\">Fluteday</option>\r\n                                <option value=\"Flinkday\">Flinkday</option>\r\n                                <option value=\"Flynsday\">Flynsday</option>\r\n                                <option value=\"Friday\">Friday</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.day !== \"\" && <p>{this.props.props.state.errors.day}</p>}\r\n                        </div>\r\n                        <div className=\"option\">\r\n                            <select className=\"control dropdown\" value={soup} onChange={updateSoup}>\r\n                                <option value=\"0\" defaultValue>(Soup)</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.soup !== \"\" && <p>{this.props.props.state.errors.soup}</p>}\r\n                        </div>\r\n                        <input className=\"control\" type=\"submit\" value=\"Calculate\" onClick={getResult} />\r\n                    </section>\r\n                    {testFunc()}\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Questions;","import React, { Component } from 'react';\nimport './App.css';\nimport logo from \"./content/Apple.png\";\nimport Questions from \"./components/questions\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colour: \"\",\n      day: \"\",\n      soup: \"\",\n      result: \"\",\n      errors: {\n        colour: \"\",\n        day: \"\",\n        soup: \"\",\n      }\n    };\n\n    this.updateColour = this.updateColour.bind(this);\n    this.updateDay = this.updateDay.bind(this);\n    this.updateSoup = this.updateSoup.bind(this);\n    this.getResult = this.getResult.bind(this);\n  }\n\n  updateColour(e) {\n    this.setState(\n      { colour: e.target.value }\n    )\n  }\n\n  updateDay(e) {\n    this.setState(\n      { day: e.target.value }\n    )\n  }\n\n  updateSoup(e) {\n    this.setState(\n      { soup: e.target.value }\n    )\n  }\n\n  getResult(e) {\n    e.preventDefault();\n\n    let colourError = this.state.colour === \"\";\n    let dayError = this.state.day === \"\";\n    let soupError = this.state.soup === \"\";\n\n    this.setState((state, props) => ({\n      errors: {\n        colour: colourError ? \"Doesn't look like a colour, buddy\" : \"\",\n        day: dayError ? \"I don't think that's a day, fren\" : \"\",\n        soup: soupError ? \"(Soup)! Sounds tasty..\" : \"\",\n      },\n    }));\n\n    let isError = colourError || dayError || soupError;\n\n    if (!isError) {\n      let a = this.state.colour.substr(0, 3);\n      let b = this.state.day.substr(3, 2);\n      let c = this.state.soup.substr(this.state.soup.length - 2);\n\n      this.setState((state, props) => ({\n        result: `You're a ${(a + b + c)}!`,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Always wondered what type of apple you were?<br/>\n            Today is the day you find out!\n          </p>\n        </header>\n        <Questions props={this}/>\n        <p className=\"result\">{this.state.result}</p>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}