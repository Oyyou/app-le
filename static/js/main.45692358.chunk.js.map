{"version":3,"sources":["content/Apple.png","components/questions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Questions","this","props","colour","day","soup","updateColour","updateDay","updateSoup","getResult","className","state","errors","value","onChange","defaultValue","type","onClick","console","log","Component","App","result","bind","e","setState","target","preventDefault","colourError","length","dayError","soupError","a","substr","b","c","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45692358.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Apple.3d3d9ef3.png\";","import React, { Component } from 'react'\r\nimport './questions.scss'\r\n\r\nclass Questions extends Component {\r\n    render() {\r\n        const { colour, day, soup, updateColour, updateDay, updateSoup, getResult } = this.props.props;\r\n\r\n        const testFunc = () => {\r\n            console.log(this.props.props.state);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <form>\r\n                    <h1>Pick your favourites:</h1>\r\n                    <section className=\"options\">\r\n                        <div className=\"option\">\r\n                            <select className={\"control dropdown\" + (this.props.props.state.errors.colour !== \"\" ? \" error\" : \"\")} value={colour} onChange={updateColour}>\r\n                                <option value=\"0\" defaultValue>(Colour)</option>\r\n                                <option value=\"Blorange\">Blorange</option>\r\n                                <option value=\"Fled\">Fled</option>\r\n                                <option value=\"Muurple\">Muurple</option>\r\n                                <option value=\"Splank\">Splank</option>\r\n                                <option value=\"Jellow\">Jellow</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.colour !== \"\" && <p>{this.props.props.state.errors.colour}</p>}\r\n                        </div>\r\n                        <div className=\"option\">\r\n                            <select className={\"control dropdown\" + (this.props.props.state.errors.day !== \"\" ? \" error\" : \"\")}  value={day} onChange={updateDay}>\r\n                                <option value=\"0\" defaultValue>(Day)</option>\r\n                                <option value=\"Flensday\">Flensday</option>\r\n                                <option value=\"Floopday\">Floopday</option>\r\n                                <option value=\"Flangaday\">Flangaday</option>\r\n                                <option value=\"Fluteday\">Fluteday</option>\r\n                                <option value=\"Flinkday\">Flinkday</option>\r\n                                <option value=\"Flynsday\">Flynsday</option>\r\n                                <option value=\"Friday\">Friday</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.day !== \"\" && <p>{this.props.props.state.errors.day}</p>}\r\n                        </div>\r\n                        <div className=\"option\">\r\n                            <select className={\"control dropdown\" + (this.props.props.state.errors.soup !== \"\" ? \" error\" : \"\")}  value={soup} onChange={updateSoup}>\r\n                                <option value=\"0\" defaultValue>(Soup)</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                                <option value=\"Apple\">Apple</option>\r\n                            </select>\r\n                            {this.props.props.state.errors.soup !== \"\" && <p>{this.props.props.state.errors.soup}</p>}\r\n                        </div>\r\n                        <input className=\"control\" type=\"submit\" value=\"Calculate\" onClick={getResult} />\r\n                    </section>\r\n                    {testFunc()}\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Questions;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport logo from \"./content/Apple.png\";\r\nimport Questions from \"./components/questions\"\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      colour: \"\",\r\n      day: \"\",\r\n      soup: \"\",\r\n      result: \"\",\r\n      errors: {\r\n        colour: \"\",\r\n        day: \"\",\r\n        soup: \"\",\r\n      }\r\n    };\r\n\r\n    this.updateColour = this.updateColour.bind(this);\r\n    this.updateDay = this.updateDay.bind(this);\r\n    this.updateSoup = this.updateSoup.bind(this);\r\n    this.getResult = this.getResult.bind(this);\r\n  }\r\n\r\n  updateColour(e) {\r\n    this.setState(\r\n      { colour: e.target.value }\r\n    )\r\n  }\r\n\r\n  updateDay(e) {\r\n    this.setState(\r\n      { day: e.target.value }\r\n    )\r\n  }\r\n\r\n  updateSoup(e) {\r\n    this.setState(\r\n      { soup: e.target.value }\r\n    )\r\n  }\r\n\r\n  getResult(e) {\r\n    e.preventDefault();\r\n\r\n    let colourError = this.state.colour.length < 2;\r\n    let dayError = this.state.day.length < 2;\r\n    let soupError = this.state.soup.length < 2;\r\n\r\n    this.setState((state, props) => ({\r\n      errors: {\r\n        colour: colourError ? \"Doesn't look like a colour, buddy\" : \"\",\r\n        day: dayError ? \"I don't think that's a day, fren\" : \"\",\r\n        soup: soupError ? \"(Soup)! Sounds tasty..\" : \"\",\r\n      },\r\n      result: \"\",\r\n    }));\r\n\r\n    let isError = colourError || dayError || soupError;\r\n\r\n    if (!isError) {\r\n      let a = this.state.colour.substr(0, 3);\r\n      let b = this.state.day.substr(3, 2);\r\n      let c = this.state.soup.substr(this.state.soup.length - 2);\r\n\r\n      this.setState((state, props) => ({\r\n        result: `You're a ${(a + b + c)}!`,\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Always wondered what type of apple you were?<br/>\r\n            Today is the day you find out!\r\n          </p>\r\n        </header>\r\n        <Questions props={this}/>\r\n        <p className=\"result\">{this.state.result}</p>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}